"use strict";exports.id=632,exports.ids=[632],exports.modules={632:(e,n,t)=>{t.d(n,{fromIni:()=>P});var r=t(868),i=t(1940),o=t(8876),s=t(3336);let a=(e,n,r)=>{let o={EcsContainer:async e=>{let{fromHttp:n}=await t.e(64).then(t.bind(t,5064)),{fromContainerMetadata:i}=await t.e(600).then(t.bind(t,8600));return r?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),async()=>(0,s.t)(n(e??{}),i(e))().then(l)},Ec2InstanceMetadata:async e=>{r?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");let{fromInstanceMetadata:n}=await t.e(600).then(t.bind(t,8600));return async()=>n(e)().then(l)},Environment:async e=>{r?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");let{fromEnv:n}=await t.e(749).then(t.bind(t,6749));return async()=>n(e)().then(l)}};if(e in o)return o[e];throw new i.m(`Unsupported credential source in profile ${n}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:r})},l=e=>(0,o.P)(e,"CREDENTIALS_PROFILE_NAMED_PROVIDER","p"),d=(e,{profile:n="default",logger:t}={})=>!!e&&"object"==typeof e&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1&&["undefined","string"].indexOf(typeof e.external_id)>-1&&["undefined","string"].indexOf(typeof e.mfa_serial)>-1&&(c(e,{profile:n,logger:t})||_(e,{profile:n,logger:t})),c=(e,{profile:n,logger:t})=>{let r="string"==typeof e.source_profile&&void 0===e.credential_source;return r&&t?.debug?.(`    ${n} isAssumeRoleWithSourceProfile source_profile=${e.source_profile}`),r},_=(e,{profile:n,logger:t})=>{let r="string"==typeof e.credential_source&&void 0===e.source_profile;return r&&t?.debug?.(`    ${n} isCredentialSourceProfile credential_source=${e.credential_source}`),r},f=async(e,n,s,l={})=>{s.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");let d=n[e],{source_profile:c,region:_}=d;if(!s.roleAssumer){let{getDefaultRoleAssumer:e}=await t.e(100).then(t.bind(t,7100));s.roleAssumer=e({...s.clientConfig,credentialProviderLogger:s.logger,parentClientConfig:{...s?.parentClientConfig,region:_??s?.parentClientConfig?.region}},s.clientPlugins)}if(c&&c in l)throw new i.m(`Detected a cycle attempting to resolve credentials for profile ${(0,r.Jl)(s)}. Profiles visited: `+Object.keys(l).join(", "),{logger:s.logger});s.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${c?`source_profile=[${c}]`:`profile=[${e}]`}`);let f=c?m(c,n,s,{...l,[c]:!0},g(n[c]??{})):(await a(d.credential_source,e,s.logger)(s))();if(g(d))return f.then(e=>(0,o.P)(e,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"));{let n={RoleArn:d.role_arn,RoleSessionName:d.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:d.external_id,DurationSeconds:parseInt(d.duration_seconds||"3600",10)},{mfa_serial:t}=d;if(t){if(!s.mfaCodeProvider)throw new i.m(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:s.logger,tryNextLink:!1});n.SerialNumber=t,n.TokenCode=await s.mfaCodeProvider(t)}let r=await f;return s.roleAssumer(r,n).then(e=>(0,o.P)(e,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"))}},g=e=>!e.role_arn&&!!e.credential_source,u=e=>!!e&&"object"==typeof e&&"string"==typeof e.credential_process,p=async(e,n)=>t.e(211).then(t.bind(t,2211)).then(({fromProcess:t})=>t({...e,profile:n})().then(e=>(0,o.P)(e,"CREDENTIALS_PROFILE_PROCESS","v"))),y=async(e,n,r={})=>{let{fromSSO:i}=await t.e(237).then(t.bind(t,6237));return i({profile:e,logger:r.logger,parentClientConfig:r.parentClientConfig,clientConfig:r.clientConfig})().then(e=>n.sso_session?(0,o.P)(e,"CREDENTIALS_PROFILE_SSO","r"):(0,o.P)(e,"CREDENTIALS_PROFILE_SSO_LEGACY","t"))},E=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name),w=e=>!!e&&"object"==typeof e&&"string"==typeof e.aws_access_key_id&&"string"==typeof e.aws_secret_access_key&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1&&["undefined","string"].indexOf(typeof e.aws_account_id)>-1,C=async(e,n)=>{n?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");let t={accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token,...e.aws_credential_scope&&{credentialScope:e.aws_credential_scope},...e.aws_account_id&&{accountId:e.aws_account_id}};return(0,o.P)(t,"CREDENTIALS_PROFILE","n")},I=e=>!!e&&"object"==typeof e&&"string"==typeof e.web_identity_token_file&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1,b=async(e,n)=>t.e(536).then(t.bind(t,9536)).then(({fromTokenFile:t})=>t({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:n.roleAssumerWithWebIdentity,logger:n.logger,parentClientConfig:n.parentClientConfig})().then(e=>(0,o.P)(e,"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN","q"))),m=async(e,n,t,r={},o=!1)=>{let s=n[e];if(Object.keys(r).length>0&&w(s))return C(s,t);if(o||d(s,{profile:e,logger:t.logger}))return f(e,n,t,r);if(w(s))return C(s,t);if(I(s))return b(s,t);if(u(s))return p(t,e);if(E(s))return await y(e,s,t);throw new i.m(`Could not resolve credentials using profile: [${e}] in configuration/credentials file(s).`,{logger:t.logger})},P=(e={})=>async({callerClientConfig:n}={})=>{let t={...e,parentClientConfig:{...n,...e.parentClientConfig}};t.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");let i=await (0,r.MX)(t);return m((0,r.Jl)({profile:e.profile??n?.profile}),i,t)}}};