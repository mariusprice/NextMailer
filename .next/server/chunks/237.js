"use strict";exports.id=237,exports.ids=[237],exports.modules={6237:(e,t,s)=>{s.d(t,{fromSSO:()=>k});var o=s(1940),n=s(868);let i=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name);var r=s(8876),a=s(9393);class l extends a.k{constructor(e,t=!0){super(e,t),this.name="TokenProviderError",Object.setPrototypeOf(this,l.prototype)}}let g="To refresh this SSO session run 'aws sso login' with the corresponding profile.",c=async(e,t={})=>{let{SSOOIDCClient:o}=await s.e(210).then(s.bind(s,210));return new o(Object.assign({},t.clientConfig??{},{region:e??t.clientConfig?.region,logger:t.clientConfig?.logger??t.parentClientConfig?.logger}))},f=async(e,t,o={})=>{let{CreateTokenCommand:n}=await s.e(210).then(s.bind(s,210));return(await c(t,o)).send(new n({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))},w=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new l(`Token is expired. ${g}`,!1)},p=(e,t,s=!1)=>{if(void 0===t)throw new l(`Value not present for '${e}' in SSO Token${s?". Cannot refresh":""}. ${g}`,!1)},{writeFile:h}=s(7147).promises,d=(e,t)=>h((0,n.Py)(e),JSON.stringify(t,null,2)),u=new Date(0),S=(e={})=>async({callerClientConfig:t}={})=>{let s;let o={...e,parentClientConfig:{...t,...e.parentClientConfig}};o.logger?.debug("@aws-sdk/token-providers - fromSso");let i=await (0,n.MX)(o),r=(0,n.Jl)({profile:o.profile??t?.profile}),a=i[r];if(a){if(!a.sso_session)throw new l(`Profile '${r}' is missing required property 'sso_session'.`)}else throw new l(`Profile '${r}' could not be found in shared credentials file.`,!1);let c=a.sso_session,h=(await (0,n.G)(o))[c];if(!h)throw new l(`Sso session '${c}' could not be found in shared credentials file.`,!1);for(let e of["sso_start_url","sso_region"])if(!h[e])throw new l(`Sso session '${c}' is missing required property '${e}'.`,!1);h.sso_start_url;let S=h.sso_region;try{s=await (0,n.gH)(c)}catch(e){throw new l(`The SSO session token associated with profile=${r} was not found or is invalid. ${g}`,!1)}p("accessToken",s.accessToken),p("expiresAt",s.expiresAt);let{accessToken:_,expiresAt:m}=s,k={token:_,expiration:new Date(m)};if(k.expiration.getTime()-Date.now()>3e5)return k;if(Date.now()-u.getTime()<3e4)return w(k),k;p("clientId",s.clientId,!0),p("clientSecret",s.clientSecret,!0),p("refreshToken",s.refreshToken,!0);try{u.setTime(Date.now());let e=await f(s,S,o);p("accessToken",e.accessToken),p("expiresIn",e.expiresIn);let t=new Date(Date.now()+1e3*e.expiresIn);try{await d(c,{...s,accessToken:e.accessToken,expiresAt:t.toISOString(),refreshToken:e.refreshToken})}catch(e){}return{token:e.accessToken,expiration:t}}catch(e){return w(k),k}},_=async({ssoStartUrl:e,ssoSession:t,ssoAccountId:i,ssoRegion:a,ssoRoleName:l,ssoClient:g,clientConfig:c,parentClientConfig:f,profile:w,logger:p})=>{let h,d;let u="To refresh this SSO session run aws sso login with the corresponding profile.";if(t)try{let e=await S({profile:w})();h={accessToken:e.token,expiresAt:new Date(e.expiration).toISOString()}}catch(e){throw new o.m(e.message,{tryNextLink:!1,logger:p})}else try{h=await (0,n.gH)(e)}catch(e){throw new o.m(`The SSO session associated with this profile is invalid. ${u}`,{tryNextLink:!1,logger:p})}if(new Date(h.expiresAt).getTime()-Date.now()<=0)throw new o.m(`The SSO session associated with this profile has expired. ${u}`,{tryNextLink:!1,logger:p});let{accessToken:_}=h,{SSOClient:m,GetRoleCredentialsCommand:k}=await s.e(516).then(s.bind(s,8516)),y=g||new m(Object.assign({},c??{},{logger:c?.logger??f?.logger,region:c?.region??a}));try{d=await y.send(new k({accountId:i,roleName:l,accessToken:_}))}catch(e){throw new o.m(e,{tryNextLink:!1,logger:p})}let{roleCredentials:{accessKeyId:T,secretAccessKey:x,sessionToken:C,expiration:O,credentialScope:$,accountId:I}={}}=d;if(!T||!x||!C||!O)throw new o.m("SSO returns an invalid temporary credential.",{tryNextLink:!1,logger:p});let N={accessKeyId:T,secretAccessKey:x,sessionToken:C,expiration:new Date(O),...$&&{credentialScope:$},...I&&{accountId:I}};return t?(0,r.P)(N,"CREDENTIALS_SSO","s"):(0,r.P)(N,"CREDENTIALS_SSO_LEGACY","u"),N},m=(e,t)=>{let{sso_start_url:s,sso_account_id:n,sso_region:i,sso_role_name:r}=e;if(!s||!n||!i||!r)throw new o.m(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:t});return e},k=(e={})=>async({callerClientConfig:t}={})=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");let{ssoStartUrl:s,ssoAccountId:r,ssoRegion:a,ssoRoleName:l,ssoSession:g}=e,{ssoClient:c}=e,f=(0,n.Jl)({profile:e.profile??t?.profile});if(s||r||a||l||g){if(s&&r&&a&&l)return _({ssoStartUrl:s,ssoSession:g,ssoAccountId:r,ssoRegion:a,ssoRoleName:l,ssoClient:c,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:f});throw new o.m('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger})}{let t=(await (0,n.MX)(e))[f];if(!t)throw new o.m(`Profile ${f} was not found.`,{logger:e.logger});if(!i(t))throw new o.m(`Profile ${f} is not configured with SSO credentials.`,{logger:e.logger});if(t?.sso_session){let i=(await (0,n.G)(e))[t.sso_session],r=` configurations in profile ${f} and sso-session ${t.sso_session}`;if(a&&a!==i.sso_region)throw new o.m("Conflicting SSO region"+r,{tryNextLink:!1,logger:e.logger});if(s&&s!==i.sso_start_url)throw new o.m("Conflicting SSO start_url"+r,{tryNextLink:!1,logger:e.logger});t.sso_region=i.sso_region,t.sso_start_url=i.sso_start_url}let{sso_start_url:r,sso_account_id:l,sso_region:g,sso_role_name:w,sso_session:p}=m(t,e.logger);return _({ssoStartUrl:r,ssoSession:p,ssoAccountId:l,ssoRegion:g,ssoRoleName:w,ssoClient:c,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:f})}}}};